/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Answer } from './Answer';
import {
    AnswerFromJSON,
    AnswerFromJSONTyped,
    AnswerToJSON,
    AnswerToJSONTyped,
} from './Answer';
import type { SessionStage } from './SessionStage';
import {
    SessionStageFromJSON,
    SessionStageFromJSONTyped,
    SessionStageToJSON,
    SessionStageToJSONTyped,
} from './SessionStage';
import type { QuestionPublic } from './QuestionPublic';
import {
    QuestionPublicFromJSON,
    QuestionPublicFromJSONTyped,
    QuestionPublicToJSON,
    QuestionPublicToJSONTyped,
} from './QuestionPublic';

/**
 * 
 * @export
 * @interface SessionPublic
 */
export interface SessionPublic {
    /**
     * 
     * @type {string}
     * @memberof SessionPublic
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SessionPublic
     */
    ownerId: string;
    /**
     * 
     * @type {string}
     * @memberof SessionPublic
     */
    quizId: string;
    /**
     * 
     * @type {SessionStage}
     * @memberof SessionPublic
     */
    stage: SessionStage;
    /**
     * 
     * @type {number}
     * @memberof SessionPublic
     */
    audienceCount: number;
    /**
     * 
     * @type {QuestionPublic}
     * @memberof SessionPublic
     */
    currentQuestion?: QuestionPublic | null;
    /**
     * 
     * @type {Array<Answer>}
     * @memberof SessionPublic
     */
    currentAnswers?: Array<Answer>;
}



/**
 * Check if a given object implements the SessionPublic interface.
 */
export function instanceOfSessionPublic(value: object): value is SessionPublic {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('ownerId' in value) || value['ownerId'] === undefined) return false;
    if (!('quizId' in value) || value['quizId'] === undefined) return false;
    if (!('stage' in value) || value['stage'] === undefined) return false;
    if (!('audienceCount' in value) || value['audienceCount'] === undefined) return false;
    return true;
}

export function SessionPublicFromJSON(json: any): SessionPublic {
    return SessionPublicFromJSONTyped(json, false);
}

export function SessionPublicFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionPublic {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'ownerId': json['owner_id'],
        'quizId': json['quiz_id'],
        'stage': SessionStageFromJSON(json['stage']),
        'audienceCount': json['audience_count'],
        'currentQuestion': json['current_question'] == null ? undefined : QuestionPublicFromJSON(json['current_question']),
        'currentAnswers': json['current_answers'] == null ? undefined : ((json['current_answers'] as Array<any>).map(AnswerFromJSON)),
    };
}

export function SessionPublicToJSON(json: any): SessionPublic {
    return SessionPublicToJSONTyped(json, false);
}

export function SessionPublicToJSONTyped(value?: SessionPublic | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'owner_id': value['ownerId'],
        'quiz_id': value['quizId'],
        'stage': SessionStageToJSON(value['stage']),
        'audience_count': value['audienceCount'],
        'current_question': QuestionPublicToJSON(value['currentQuestion']),
        'current_answers': value['currentAnswers'] == null ? undefined : ((value['currentAnswers'] as Array<any>).map(AnswerToJSON)),
    };
}

