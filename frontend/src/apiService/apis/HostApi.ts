/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  QuestionCreate,
  QuestionPublicFullAnalysis,
  QuestionUpdate,
  QuizCreate,
  QuizPublic,
  QuizPublicExtended,
  ResponseBase,
  SentimentAnalysisPublic,
  SummaryPublic,
  TopicPublic,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    QuestionCreateFromJSON,
    QuestionCreateToJSON,
    QuestionPublicFullAnalysisFromJSON,
    QuestionPublicFullAnalysisToJSON,
    QuestionUpdateFromJSON,
    QuestionUpdateToJSON,
    QuizCreateFromJSON,
    QuizCreateToJSON,
    QuizPublicFromJSON,
    QuizPublicToJSON,
    QuizPublicExtendedFromJSON,
    QuizPublicExtendedToJSON,
    ResponseBaseFromJSON,
    ResponseBaseToJSON,
    SentimentAnalysisPublicFromJSON,
    SentimentAnalysisPublicToJSON,
    SummaryPublicFromJSON,
    SummaryPublicToJSON,
    TopicPublicFromJSON,
    TopicPublicToJSON,
} from '../models/index';

export interface AddPredefinedQuestionRequest {
    quizId: string;
    questionCreate: QuestionCreate;
}

export interface CreateQuizRequest {
    quizCreate: QuizCreate;
}

export interface DeletePredefinedQuestionRequest {
    quizId: string;
    questionId: string;
}

export interface DeleteQuizRequest {
    quizId: string;
}

export interface GetQuizRequest {
    quizId: string;
}

export interface GetQuizAnalysesRequest {
    quizId: string;
}

export interface GetQuizSentimentRequest {
    quizId: string;
}

export interface GetQuizSummariesRequest {
    quizId: string;
}

export interface GetQuizTopicsRequest {
    quizId: string;
}

export interface ImportQuestionsRequest {
    quizId: string;
    requestBody: Array<string>;
}

export interface UpdatePredefinedQuestionRequest {
    quizId: string;
    questionId: string;
    questionUpdate: QuestionUpdate;
}

/**
 * 
 */
export class HostApi extends runtime.BaseAPI {

    /**
     * Add a predefined question to the quiz that can be asked later during a session
     * Add Predefined Question
     */
    async addPredefinedQuestionRaw(requestParameters: AddPredefinedQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuizPublicExtended>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling addPredefinedQuestion().'
            );
        }

        if (requestParameters['questionCreate'] == null) {
            throw new runtime.RequiredError(
                'questionCreate',
                'Required parameter "questionCreate" was null or undefined when calling addPredefinedQuestion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/host/quizzes/{quiz_id}/questions`.replace(`{${"quiz_id"}}`, encodeURIComponent(String(requestParameters['quizId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionCreateToJSON(requestParameters['questionCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuizPublicExtendedFromJSON(jsonValue));
    }

    /**
     * Add a predefined question to the quiz that can be asked later during a session
     * Add Predefined Question
     */
    async addPredefinedQuestion(requestParameters: AddPredefinedQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuizPublicExtended> {
        const response = await this.addPredefinedQuestionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Quiz
     */
    async createQuizRaw(requestParameters: CreateQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuizPublic>> {
        if (requestParameters['quizCreate'] == null) {
            throw new runtime.RequiredError(
                'quizCreate',
                'Required parameter "quizCreate" was null or undefined when calling createQuiz().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/host/quizzes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuizCreateToJSON(requestParameters['quizCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuizPublicFromJSON(jsonValue));
    }

    /**
     * Create Quiz
     */
    async createQuiz(requestParameters: CreateQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuizPublic> {
        const response = await this.createQuizRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a predefined question from a quiz. Only questions that belong to the quiz and are marked as predefined can be deleted. This leverages the relationships defined in setup (e.g. Question.quiz_id).
     * Delete Predefined Question
     */
    async deletePredefinedQuestionRaw(requestParameters: DeletePredefinedQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuizPublicExtended>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling deletePredefinedQuestion().'
            );
        }

        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling deletePredefinedQuestion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/host/quizzes/{quiz_id}/questions/{question_id}`.replace(`{${"quiz_id"}}`, encodeURIComponent(String(requestParameters['quizId']))).replace(`{${"question_id"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuizPublicExtendedFromJSON(jsonValue));
    }

    /**
     * Delete a predefined question from a quiz. Only questions that belong to the quiz and are marked as predefined can be deleted. This leverages the relationships defined in setup (e.g. Question.quiz_id).
     * Delete Predefined Question
     */
    async deletePredefinedQuestion(requestParameters: DeletePredefinedQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuizPublicExtended> {
        const response = await this.deletePredefinedQuestionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a quiz by id
     * Delete Quiz
     */
    async deleteQuizRaw(requestParameters: DeleteQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseBase>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling deleteQuiz().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/host/quizzes/{quiz_id}`.replace(`{${"quiz_id"}}`, encodeURIComponent(String(requestParameters['quizId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseBaseFromJSON(jsonValue));
    }

    /**
     * Delete a quiz by id
     * Delete Quiz
     */
    async deleteQuiz(requestParameters: DeleteQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseBase> {
        const response = await this.deleteQuizRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Quizzes
     */
    async getAllQuizzesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuizPublic>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/host/quizzes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuizPublicFromJSON));
    }

    /**
     * Get Quizzes
     */
    async getAllQuizzes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuizPublic>> {
        const response = await this.getAllQuizzesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch a single quiz by its id with related questions and ratings
     * Get Quiz
     */
    async getQuizRaw(requestParameters: GetQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuizPublicExtended>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling getQuiz().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/host/quizzes/{quiz_id}`.replace(`{${"quiz_id"}}`, encodeURIComponent(String(requestParameters['quizId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuizPublicExtendedFromJSON(jsonValue));
    }

    /**
     * Fetch a single quiz by its id with related questions and ratings
     * Get Quiz
     */
    async getQuiz(requestParameters: GetQuizRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuizPublicExtended> {
        const response = await this.getQuizRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all analyses tied to a quiz
     * Get Quiz Analyses
     */
    async getQuizAnalysesRaw(requestParameters: GetQuizAnalysesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QuestionPublicFullAnalysis>>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling getQuizAnalyses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/host/quizzes/{quiz_id}/analyses`.replace(`{${"quiz_id"}}`, encodeURIComponent(String(requestParameters['quizId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QuestionPublicFullAnalysisFromJSON));
    }

    /**
     * Retrieve all analyses tied to a quiz
     * Get Quiz Analyses
     */
    async getQuizAnalyses(requestParameters: GetQuizAnalysesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QuestionPublicFullAnalysis>> {
        const response = await this.getQuizAnalysesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all sentiment analyses tied to a quiz
     * Get Quiz Sentiment
     */
    async getQuizSentimentRaw(requestParameters: GetQuizSentimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SentimentAnalysisPublic>>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling getQuizSentiment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/host/quizzes/{quiz_id}/analyses/sentiment`.replace(`{${"quiz_id"}}`, encodeURIComponent(String(requestParameters['quizId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SentimentAnalysisPublicFromJSON));
    }

    /**
     * Retrieve all sentiment analyses tied to a quiz
     * Get Quiz Sentiment
     */
    async getQuizSentiment(requestParameters: GetQuizSentimentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SentimentAnalysisPublic>> {
        const response = await this.getQuizSentimentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all summaries tied to a quiz
     * Get Quiz Summaries
     */
    async getQuizSummariesRaw(requestParameters: GetQuizSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SummaryPublic>>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling getQuizSummaries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/host/quizzes/{quiz_id}/analyses/summaries`.replace(`{${"quiz_id"}}`, encodeURIComponent(String(requestParameters['quizId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SummaryPublicFromJSON));
    }

    /**
     * Retrieve all summaries tied to a quiz
     * Get Quiz Summaries
     */
    async getQuizSummaries(requestParameters: GetQuizSummariesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SummaryPublic>> {
        const response = await this.getQuizSummariesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all topics tied to a quiz
     * Get Quiz Topics
     */
    async getQuizTopicsRaw(requestParameters: GetQuizTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TopicPublic>>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling getQuizTopics().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/host/quizzes/{quiz_id}/analyses/topics`.replace(`{${"quiz_id"}}`, encodeURIComponent(String(requestParameters['quizId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TopicPublicFromJSON));
    }

    /**
     * Retrieve all topics tied to a quiz
     * Get Quiz Topics
     */
    async getQuizTopics(requestParameters: GetQuizTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TopicPublic>> {
        const response = await this.getQuizTopicsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import a set of questions and answers from file contents
     * Import Questions
     */
    async importQuestionsRaw(requestParameters: ImportQuestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuizPublic>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling importQuestions().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling importQuestions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/host/quizzes/{quiz_id}/import`.replace(`{${"quiz_id"}}`, encodeURIComponent(String(requestParameters['quizId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuizPublicFromJSON(jsonValue));
    }

    /**
     * Import a set of questions and answers from file contents
     * Import Questions
     */
    async importQuestions(requestParameters: ImportQuestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuizPublic> {
        const response = await this.importQuestionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update a predefined question. Only questions that belong to the quiz and are marked as predefined can be updated. This implementation uses the relationships already defined in setup.
     * Update Predefined Question
     */
    async updatePredefinedQuestionRaw(requestParameters: UpdatePredefinedQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuizPublicExtended>> {
        if (requestParameters['quizId'] == null) {
            throw new runtime.RequiredError(
                'quizId',
                'Required parameter "quizId" was null or undefined when calling updatePredefinedQuestion().'
            );
        }

        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling updatePredefinedQuestion().'
            );
        }

        if (requestParameters['questionUpdate'] == null) {
            throw new runtime.RequiredError(
                'questionUpdate',
                'Required parameter "questionUpdate" was null or undefined when calling updatePredefinedQuestion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/host/quizzes/{quiz_id}/questions/{question_id}`.replace(`{${"quiz_id"}}`, encodeURIComponent(String(requestParameters['quizId']))).replace(`{${"question_id"}}`, encodeURIComponent(String(requestParameters['questionId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionUpdateToJSON(requestParameters['questionUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuizPublicExtendedFromJSON(jsonValue));
    }

    /**
     * Partially update a predefined question. Only questions that belong to the quiz and are marked as predefined can be updated. This implementation uses the relationships already defined in setup.
     * Update Predefined Question
     */
    async updatePredefinedQuestion(requestParameters: UpdatePredefinedQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuizPublicExtended> {
        const response = await this.updatePredefinedQuestionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
